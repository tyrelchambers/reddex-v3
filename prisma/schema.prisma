generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  customerId       String?
  deleteOnDate     DateTime?
  lastLogin        DateTime?
  accounts         Account[]
  contact          Contact[]
  ContactedWriters ContactedWriters[]
  Profile          Profile?
  RedditPost       RedditPost[]
  sessions         Session[]
  SubmittedStory   SubmittedStory[]
  Tag              Tag[]
  Website          Website?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id     String  @id @default(cuid())
  name   String
  notes  String?
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactedWriters {
  id     String @id @default(cuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id               String             @id @default(cuid())
  greeting         String?
  recurring        String?
  words_per_minute Int?
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  searches         RecentlySearched[]
}

model RecentlySearched {
  id        String   @id @default(cuid())
  text      String
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model RedditPost {
  id            String          @id @default(cuid())
  author        String
  flair         String?
  num_comments  Int
  post_id       String
  story_length  Int
  title         String
  ups           Int
  url           String
  subreddit     String
  permission    Boolean         @default(false)
  read          Boolean         @default(false)
  reading_time  Int
  upvote_ratio  Float
  created       Int
  content       String
  userId        String
  deleted_at    DateTime?
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  TagsOnStories TagsOnStories[]
}

model TagsOnStories {
  RedditPostId String
  tagId        String
  RedditPost   RedditPost @relation(fields: [RedditPostId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([RedditPostId, tagId])
}

model Tag {
  id            String          @id @default(cuid())
  tag           String
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  TagsOnStories TagsOnStories[]
}

model SubmittedStory {
  id             String    @id @default(cuid())
  email          String?
  author         String?
  sent_to_others Boolean?
  body           String
  userId         String
  title          String?
  date           DateTime  @default(now())
  completed      Boolean   @default(false)
  deleted_at     DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Website {
  id                    String               @id @default(cuid())
  hidden                Boolean              @default(true)
  subdomain             String?              @unique
  name                  String?
  description           String?
  twitter               String?
  facebook              String?
  instagram             String?
  patreon               String?
  youtube               String?
  podcast               String?
  theme                 String               @default("light")
  colour                String               @default("#000")
  banner                String?
  thumbnail             String?
  userId                String               @unique
  submissionPageId      String               @unique
  youtubeIntegrationId  String?
  canBeEnabled          Boolean?
  ohcleo                String?
  tiktok                String?
  customDomain          WebsiteCustomDomain? @relation(fields: [websiteCustomDomainId], references: [id])
  websiteCustomDomainId String?              @unique
  submissionPage        SubmissionPage       @relation(fields: [submissionPageId], references: [id], onDelete: Cascade)
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubmissionPage {
  id                    String                 @id @default(cuid())
  name                  String?
  subtitle              String?
  description           String?
  hidden                Boolean                @default(true)
  submissionFormModules SubmissionFormModule[]
  website               Website?
}

model SubmissionFormModule {
  id               String          @id @default(cuid())
  name             String
  enabled          Boolean         @default(false)
  required         Boolean         @default(false)
  submissionPageId String?
  submissionPage   SubmissionPage? @relation(fields: [submissionPageId], references: [id], onDelete: Cascade)
}

model Stats {
  id    String @id @default(cuid())
  posts Int    @default(0)
}

model InboxMessage {
  id           String   @id @default(cuid())
  redditPostId String
  to           String
  subject      String
  createdAt    DateTime @default(now())
  from         String   @default("")
}

model Shop {
  id                 String   @id @default(cuid())
  type               String?
  verifiedConnection Boolean?
  token              String?
  shopUrl            String?
  websiteId          String   @unique
  enabled            Boolean  @default(false)
}

model ShopCollection {
  id           String  @id @default(cuid())
  collectionId String  @unique
  name         String
  slug         String
  description  String
  shopId       String
  enabled      Boolean @default(false)
}

model WebsiteCustomDomain {
  id       String   @id @default(cuid())
  domain   String
  verified Boolean
  Website  Website?
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}
